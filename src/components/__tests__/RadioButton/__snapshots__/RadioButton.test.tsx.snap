// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RadioButton RadioButton with custom testID renders properly 1`] = `
<View
  accessibilityLiveRegion="polite"
  accessibilityRole="radio"
  accessibilityState={
    {
      "busy": undefined,
      "checked": false,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    [
      {
        "overflow": "hidden",
      },
      {
        "borderRadius": 18,
        "padding": 6,
      },
    ]
  }
  testID="custom:testID"
>
  <View
    style={
      {
        "opacity": 0,
      }
    }
  >
    <Text
      accessibilityElementsHidden={true}
      allowFontScaling={false}
      importantForAccessibility="no-hide-descendants"
      pointerEvents="none"
      selectable={false}
      style={
        [
          {
            "color": "rgba(103, 80, 164, 1)",
            "fontSize": 24,
          },
          [
            {
              "lineHeight": 24,
              "transform": [
                {
                  "scaleX": 1,
                },
              ],
            },
            {
              "backgroundColor": "transparent",
            },
          ],
        ]
      }
    >
      check
    </Text>
  </View>
</View>
`;

exports[`RadioButton on default platform renders properly 1`] = `
<View
  accessibilityLiveRegion="polite"
  accessibilityRole="radio"
  accessibilityState={
    {
      "busy": undefined,
      "checked": false,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    [
      {
        "overflow": "hidden",
      },
      {
        "borderRadius": 18,
        "padding": 6,
      },
    ]
  }
>
  <View
    style={
      {
        "opacity": 0,
      }
    }
  >
    <Text
      accessibilityElementsHidden={true}
      allowFontScaling={false}
      importantForAccessibility="no-hide-descendants"
      pointerEvents="none"
      selectable={false}
      style={
        [
          {
            "color": "rgba(103, 80, 164, 1)",
            "fontSize": 24,
          },
          [
            {
              "lineHeight": 24,
              "transform": [
                {
                  "scaleX": 1,
                },
              ],
            },
            {
              "backgroundColor": "transparent",
            },
          ],
        ]
      }
    >
      check
    </Text>
  </View>
</View>
`;

exports[`RadioButton on ios platform renders properly 1`] = `
<View
  accessibilityLiveRegion="polite"
  accessibilityRole="radio"
  accessibilityState={
    {
      "busy": undefined,
      "checked": false,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    [
      {
        "overflow": "hidden",
      },
      {
        "borderRadius": 18,
        "padding": 6,
      },
    ]
  }
>
  <View
    style={
      {
        "opacity": 0,
      }
    }
  >
    <Text
      accessibilityElementsHidden={true}
      allowFontScaling={false}
      importantForAccessibility="no-hide-descendants"
      pointerEvents="none"
      selectable={false}
      style={
        [
          {
            "color": "rgba(103, 80, 164, 1)",
            "fontSize": 24,
          },
          [
            {
              "lineHeight": 24,
              "transform": [
                {
                  "scaleX": 1,
                },
              ],
            },
            {
              "backgroundColor": "transparent",
            },
          ],
        ]
      }
    >
      check
    </Text>
  </View>
</View>
`;

exports[`RadioButton when RadioButton is wrapped by RadioButtonContext.Provider renders properly 1`] = `
<View
  accessibilityLiveRegion="polite"
  accessibilityRole="radio"
  accessibilityState={
    {
      "busy": undefined,
      "checked": true,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    [
      {
        "overflow": "hidden",
      },
      {
        "borderRadius": 18,
        "padding": 6,
      },
    ]
  }
>
  <View
    style={
      {
        "opacity": 1,
      }
    }
  >
    <Text
      accessibilityElementsHidden={true}
      allowFontScaling={false}
      importantForAccessibility="no-hide-descendants"
      pointerEvents="none"
      selectable={false}
      style={
        [
          {
            "color": "rgba(103, 80, 164, 1)",
            "fontSize": 24,
          },
          [
            {
              "lineHeight": 24,
              "transform": [
                {
                  "scaleX": 1,
                },
              ],
            },
            {
              "backgroundColor": "transparent",
            },
          ],
        ]
      }
    >
      check
    </Text>
  </View>
</View>
`;
